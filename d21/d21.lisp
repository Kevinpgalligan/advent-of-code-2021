(defun solve-deterministic (p1 p2)
  (let ((score1 0)
	(score2 0)
	(turn 'p1)
	(dice 1)
	(num-rolls 0))
    (loop while (and (< score1 1000)
		     (< score2 1000))
	  do (let ((dx (mod (* 3 (1+ dice)) 10)))
	       (setf dice (mod (+ 3 dice) 10))
	       (incf num-rolls 3)
	       (if (eq turn 'p1)
		   (progn
		     (setf p1 (getpos (+ dx p1)))
		     (incf score1 p1)
		     (setf turn 'p2))
		   (progn
		     (setf p2 (getpos (+ dx p2)))
		     (incf score2 p2)
		     (setf turn 'p1))))
	  finally (return (values num-rolls score1 score2)))))

(defun solve-dirac (p1 p2)
  (let ((score1 0)
	(score2 0))))

(defun getpos (x)
  (if (> x 10)
      (1+ (mod x 11))
      x))
